---
import '@src/app.css'
import Sidebar from '@components/app/Sidebar.astro'

import '@fontsource/m-plus-rounded-1c'
import '@fontsource/m-plus-rounded-1c/800.css'

const { title = 'Secretplan' } = Astro.props
---

<html lang='en'>
  <head>
    <meta charset='utf-8' />
    <link rel='icon' type='image/svg+xml' href='/favicon.svg' />
    <meta name='viewport' content='width=device-width' />
    <title>{title}</title>
    <meta name='description' content='A project management tool' />
    <meta
      http-equiv='Content-Security-Policy'
      content="  
        default-src 'self' data:; 
        script-src 'self' 'unsafe-inline' 'unsafe-eval';
        connect-src 'self'; 
        img-src 'self' data: 127.0.0.1:8090; 
        style-src 'self' 'unsafe-inline';
        object-src 'none';
      "
    />
    <script>
      import * as htmx from 'htmx.org'
      import Alpine from 'alpinejs'

      declare global {
        interface Window {
          htmx: any
          Alpine: any
        }
      }

      htmx.config.selfRequestsOnly = true

      window.htmx = htmx //optional
      window.Alpine = Alpine //optional

      Alpine.start()

      htmx.process(document.body)
    </script>

    <script is:inline>
      document.addEventListener('DOMContentLoaded', () => {
        document.addEventListener('htmx:responseError', function (event) {
          if (event.detail.failed) {
            if (event.detail.xhr.status === 404) {
              alert('Resource not found')
            } else if (event.detail.xhr.responseText) {
              alert(event.detail.xhr.responseText)
            } else {
              alert('Sorry, there was an error')
            }
          }
        })
      })

      document.addEventListener('htmx:sendError', function (event) {
        alert('A connection error occurred')
      })

      function dragAndDropIntoTask() {
        const maxImageSize = 5 * 1024 * 1024

        return {
          drop(event) {
            if (!event.dataTransfer.items) return

            const formData = new FormData()

            if (parseInt(event.currentTarget.dataset.imagesNumber) === 10) {
              alert('Max number of images is 10')
              return
            }
            for (let item of event.dataTransfer.items) {
              if (item.kind === 'file') {
                const file = item.getAsFile()

                if (file) {
                  if (file.size > maxImageSize) {
                    alert('Image too big, max size 5MB  ')
                    return
                  }
                  if (!file.type.match('image.*')) {
                    alert('Only images supported!')
                    return
                  }
                  formData.append('images', file)
                }
              }
            }

            htmx.ajax('PUT', event.currentTarget.getAttribute('hx-put'), {
              values: {
                images: formData.getAll('images'),
                action: 'upload',
              },
              source: event.currentTarget,
            })
          },
        }
      }
    </script>
  </head>

  <body x-data hx-boost='true'>
    <main class='min-h-screen dark:bg-black dark:text-white'>
      <div class='max-w-5xl px-4 py-4 mx-auto'>
        <dialog></dialog>
        <div class='flex sm:space-x-6'>
          <div class='hidden w-1/3 sm:block'>
            <Sidebar />
          </div>
          <div class='w-full sm:w-2/3' x-data='{showMenu : false}'>
            <div x-show='showMenu' x-cloak>
              <Sidebar />
            </div>
            <slot />
          </div>
        </div>
      </div>
    </main>
  </body>
</html>
